"use client"

import { useEffect, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Calendar, TrendingUp, Star } from "lucide-react"
import { getWeeklyReport, getDailyReport } from "@/lib/api"

interface WeeklyReportProps {
  reportId: string
}

export function WeeklyReport({ reportId }: WeeklyReportProps) {
  const [period, setPeriod] = useState<string>("")
  const [totalEntries, setTotalEntries] = useState<number>(0)
  const [totalWords, setTotalWords] = useState<number>(0)
  const [averageMood, setAverageMood] = useState<number>(0)
  const [writingConsistency, setWritingConsistency] = useState<number>(0)
  const [topThemes, setTopThemes] = useState<string[]>([])
  const [keyInsights, setKeyInsights] = useState<string[]>([])

  useEffect(() => {
    let cancelled = false
    const load = async () => {
      try {
        const today = new Date()
        const endStr = today.toISOString().slice(0,10)
        const weekly = await getWeeklyReport(endStr)
        if (cancelled) return
        const trends = weekly.trends || []
        const start = new Date(today)
        start.setDate(start.getDate() - 6)
        setPeriod(`${start.toLocaleDateString()} - ${new Date(endStr).toLocaleDateString()}`)

        const dates: string[] = []
        for (let i = 6; i >= 0; i--) {
          const d = new Date(today)
          d.setDate(d.getDate() - i)
          dates.push(d.toISOString().slice(0,10))
        }
        const daily = await Promise.all(dates.map(d => getDailyReport(d).catch(() => null)))
        if (cancelled) return
        let entries = 0, words = 0
        const tagCount: Record<string, number> = {}
        const insights: string[] = []
        for (const day of daily) {
          if (!day) continue
          const items = day.items || []
          entries += items.length
          for (const it of items) {
            if (it.note?.content) words += (String(it.note.content).split(/\s+/).filter(Boolean).length)
            const tags: string[] = it.tags || []
            for (const t of tags) tagCount[t] = (tagCount[t] || 0) + 1
            // Prefer actionable suggestions in future; fall back to ai_summary if present
            if (it.ai_summary) insights.push(it.ai_summary)
          }
        }
        setTotalEntries(entries)
        setTotalWords(words)
        const avgMood = trends.length ? (trends.reduce((s: number, r: any) => s + (r.avg_ai_mood ?? r.avg_mood ?? 0), 0) / trends.length) : 0
        setAverageMood(Number(avgMood.toFixed(1)))
        const daysWithEntries = daily.filter(d => (d?.items?.length || 0) > 0).length
        setWritingConsistency(Math.round((daysWithEntries / 7) * 100))
        setTopThemes(Object.entries(tagCount).sort((a,b) => b[1]-a[1]).slice(0,3).map(([k]) => k))
        setKeyInsights(insights.slice(0,3))
      } catch {
        if (cancelled) return
        setPeriod("")
        setTotalEntries(0)
        setTotalWords(0)
        setAverageMood(0)
        setWritingConsistency(0)
        setTopThemes([])
        setKeyInsights([])
      }
    }
    load()
    return () => { cancelled = true }
  }, [reportId])

  return (
    <div className="space-y-6">
      {/* Report Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="w-5 h-5" />
                Weekly Overview
              </CardTitle>
              <CardDescription>{period}</CardDescription>
            </div>
            <Badge variant="default" className="bg-green-500">
              Generated by AI
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-4 gap-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{totalEntries}</div>
              <div className="text-sm text-muted-foreground">Journal Entries</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{totalWords}</div>
              <div className="text-sm text-muted-foreground">Words Written</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{averageMood}/10</div>
              <div className="text-sm text-muted-foreground">Average Mood</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{writingConsistency}%</div>
              <div className="text-sm text-muted-foreground">Consistency</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Key Insights */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Star className="w-5 h-5 text-yellow-500" />
            Key Insights This Week
          </CardTitle>
          <CardDescription>AI-identified patterns and observations</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {keyInsights.length === 0 && (
              <div className="text-sm text-muted-foreground">No insights yet.</div>
            )}
            {keyInsights.map((insight, index) => (
              <div key={index} className="flex items-start gap-3 p-4 bg-muted/50 rounded-lg">
                <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0" />
                <p className="text-sm leading-relaxed">{insight}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Themes and Patterns */}
      <div className="grid lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Top Themes</CardTitle>
            <CardDescription>Most discussed topics this week</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {topThemes.length === 0 && (
                <div className="text-sm text-muted-foreground">No themes yet.</div>
              )}
              {topThemes.map((theme, index) => (
                <div key={theme} className="flex items-center justify-between">
                  <span className="text-sm capitalize">{theme}</span>
                  <Badge variant="outline">Top</Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="w-5 h-5 text-green-500" />
              Progress Indicators
            </CardTitle>
            <CardDescription>Your growth metrics this week</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Mood Stability</span>
                <span className="text-sm font-medium">Excellent</span>
              </div>
              <Progress value={Math.min(100, Math.max(0, 10 * (10 - Math.abs(5 - averageMood))))} className="h-2" />
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Self-Reflection Depth</span>
                <span className="text-sm font-medium">High</span>
              </div>
              <Progress value={Math.min(100, Math.round((totalWords / Math.max(1,totalEntries)) / 20))} className="h-2" />
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Goal Orientation</span>
                <span className="text-sm font-medium">Improving</span>
              </div>
              <Progress value={65} className="h-2" />
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
